using System;
using System.Reflection;
using System.Collections.Generic;
using log4net;

namespace DOL.GameUtils
{
    public class NPCGender
    {
        private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        private static IDictionary<int, int> genderList;
        public static bool Init()
        {
            var genders = new List<int>();
            var female = CreateList(5,6,7,19,35,36,37,38,43,44,45,46,52,53,54,55,65,66,67,68,75,76,77,81,82,83,87,88,89,145,146,147,148,149,150,151,152,
                161,162,163,164,165,166,167,168,177,178,179,180,181,182,183,184,193,194,195,196,197,198,199,200,206,207,208,209,210,211,216,217,218,
                219,220226,227,228,229,230,236,237,238,239,240,258,259,260,261,266,267,268,269,274,275,276,277,282,283,284,285,294,295,296,297,298,
                299,300,301,310,311,312,313,314,315,316,317,326,327,328,329,330,331,332,333,342,343,344,345,346,347,348,349,355,356,357,358,359,365,
                366,367,368,369,375,376,377,378,379,385,386,387,388,389,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,475,476,477,478,
                483,484,485,486,491,492,493,494,499,500,501,502,507,508,509,510,515,516,517,518,523,524,525,526,531,532,533,534,539,540,541,542,547,
                548,549,550,555,556,557,558,563,564,565,566,622,646,708,709,710,711,712,713,714,715,724,725,726,727,728,729,730,731,740,741,742,743,
                744,745,746,747,756,757,758,759,760,761,762,763,785,786,787,788,797,798,799,800,801,802,803,804,809,810,811,812,836,837,838,839,841,
                853,854,855,856,864,865,869,871,873,875,890,945,955,957,959,961,963,965,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,
                1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1111,1112,
                1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1159,1160,1161,1162,
                1163,1164,1165,1166,1167,1168,1169,1170,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,
                1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1352,1354,1356,1358,1360,1362,1364,1366,
                1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1390,1650,1652,1653,1654,1656,1658,1660,1661,1662,1664,1666,1668,1760,1828,1830,
                1832,1834,1836,1838,1840,1842,1844,1846,1848,1850,1852,1854,1856,1858,1860,1883,1884,1885,1889,1891,1893,1904,1929,1961,1963,1965,
                1967,1969,1971,1973,1975,1977,1979,1981,1983,1985,1987,1989,1991,1993,1995,1997,1999,2023,2060,2061,2062,2063,2064,2065,2066,2077,
                2079,2081,2083,2085,2087,2089,2091,2093,2095,2097,2099,2101,2103,2105,2107,2109,2111,2120,2169,2170,2212,2216,2219,2311,2313,2315,
                2317,2344,2364,2365,2366,2367,2368,2369);
                       
            var male = CreateList(8,9,10,14,16,17,18,20,27,28,32,33,34,39,40,41,42,48,49,50,51,61,62,63,64,73,74,78,79,80,84,85,86,90,91,92,137,138,
                139,140,141,142,143,144,153,154,155,156,157,158,159,160,169,170,171,172,173,174,175,176,185,186,187,188,189,190,191,192,201,202,203,
                204,205,212,213,214,215,221,222,223,224,225,231,232,233,234,235,254,255,256,257,262,263,264,265,270,271,272,273,278,279,280,281,286,
                287,288,289,290,291,292,293,302,303,304,305,306,307,308,309,318,319,320,321,322,323,324,325,334,335,336,337,338,339,340,341,350,351,
                352,353,354,360,361,362,363,364,370,371,372,373,374,380,381,382,383,384,390,415,416,417,418,419,420,421,422,423,424,471,472,473,474,
                479,480,481,482,487,488,489,490,495,496,497,498,503,504,505,506,511,512,513,514,519,520,521,522,527,528,529,530,535,536,537,538,543,
                544,545,546,551,552,553,554,559,560,561,562,621,645,700,701,702,703,704,7005,706,707,716,717,718,719,720,721,722,723,732,733,734,735,
                736,737,738,739,748,749,750,751,752,753,754,755,773,774,775,776,777,778,779,780,789,790,791,792,793,794,795,796,805,806,807,808,832,
                833,834,835,840,849,850,851,852,866,867,868,870,872,874,889,954,956,958,960,962,964,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,
                1018,1019,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,
                1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1147,1148,
                1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1211,1270,1271,1272,1273,1274,1351,1353,1355,1357,1359,1361,1363,1365,1367,1369,
                1371,1373,1375,1377,1379,1381,1383,1385,1387,1389,1563,1649,1651,1655,1657,1659,1663,1665,1667,1759,1824,1825,1826,1827,1829,1831,
                1833,1835,1837,1839,1841,1843,1845,1847,1849,1851,1853,1855,1857,1859,1861,1888,1890,1892,1944,1945,1946,1947,1948,1949,1950,1951,
                1952,1953,1954,1955,1960,1962,1964,1966,1968,1970,1972,1974,1976,1978,1980,1982,1984,1986,1988,1990,1992,1994,1996,1998,2013,2014,
                2015,2016,2017,2018,2022,2045,2078,2080,2082,2084,2086,8088,2090,2092,2094,2096,2098,2100,2102,2104,2106,2108,2110,2112,2113,2114,
                2115,2116,2119,2122,2123,2124,2125,2133,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2154,2155,2215,2218,
                2310,2312,2314,2316,2343,2345,2347,2348,2350,2370,2371,2372,2373,2374,2375);

            genderList = new Dictionary<int, int>();
            // duplicate entires not really needed now but i left them in incase models get added / removed etc
            try
            {
                foreach (var entry in female)
                {
                    if (!genderList.ContainsKey(entry))
                    {
                        genderList.Add(entry, 2);
                    }
                    else
                    {
                        log.ErrorFormat("duplicate entry for : {0}", entry);
                    }
                    
                }
                foreach (var entry in male)
                {
                    if (!genderList.ContainsKey(entry))
                    {
                        genderList.Add(entry, 1);
                    }
                    else
                    {
                        log.ErrorFormat("duplicate entry for : {0}", entry);
                    }
                }
                if (log.IsInfoEnabled)
                {
                    log.Info("NPC gender list pre-loaded successfully");
                }
                return true;
            }
            catch(Exception e)
            {
                if (log.IsErrorEnabled)
                {                    
                    log.ErrorFormat("Error while filling NPC gender list: {0}", e);
                }
                return false;
            }
        }

        static List<T> CreateList<T>(params T[] values)
        {
            return new List<T>(values);
        }

        public static int GetNPCGenderFromModel(int model)
        {
            genderList.TryGetValue(model, out int gender);
            return gender;
        }
    }
}
